// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payloads/payloads.proto

package payloads

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PayloadType int32

const (
	BINARY PayloadType = 0
	TEXT   PayloadType = 1
	ACK    PayloadType = 2
)

var PayloadType_name = map[int32]string{
	0: "BINARY",
	1: "TEXT",
	2: "ACK",
}
var PayloadType_value = map[string]int32{
	"BINARY": 0,
	"TEXT":   1,
	"ACK":    2,
}

func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_payloads_eda209b91fbaf3f5, []int{0}
}

type Message struct {
	Payload      []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Encrypted    bool   `protobuf:"varint,2,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	Nonce        []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	EncryptedKey []byte `protobuf:"bytes,4,opt,name=encrypted_key,json=encryptedKey,proto3" json:"encrypted_key,omitempty"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_payloads_eda209b91fbaf3f5, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

func (m *Message) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Message) GetEncryptedKey() []byte {
	if m != nil {
		return m.EncryptedKey
	}
	return nil
}

type Payload struct {
	Type       PayloadType `protobuf:"varint,1,opt,name=type,proto3,enum=payloads.PayloadType" json:"type,omitempty"`
	Pid        []byte      `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Data       []byte      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	ReplyToPid []byte      `protobuf:"bytes,4,opt,name=reply_to_pid,json=replyToPid,proto3" json:"reply_to_pid,omitempty"`
	NoAck      bool        `protobuf:"varint,5,opt,name=no_ack,json=noAck,proto3" json:"no_ack,omitempty"`
	IsSession  bool        `protobuf:"varint,6,opt,name=is_session,json=isSession,proto3" json:"is_session,omitempty"`
}

func (m *Payload) Reset()      { *m = Payload{} }
func (*Payload) ProtoMessage() {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_payloads_eda209b91fbaf3f5, []int{1}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(dst, src)
}
func (m *Payload) XXX_Size() int {
	return m.Size()
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetType() PayloadType {
	if m != nil {
		return m.Type
	}
	return BINARY
}

func (m *Payload) GetPid() []byte {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Payload) GetReplyToPid() []byte {
	if m != nil {
		return m.ReplyToPid
	}
	return nil
}

func (m *Payload) GetNoAck() bool {
	if m != nil {
		return m.NoAck
	}
	return false
}

func (m *Payload) GetIsSession() bool {
	if m != nil {
		return m.IsSession
	}
	return false
}

type TextData struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *TextData) Reset()      { *m = TextData{} }
func (*TextData) ProtoMessage() {}
func (*TextData) Descriptor() ([]byte, []int) {
	return fileDescriptor_payloads_eda209b91fbaf3f5, []int{2}
}
func (m *TextData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TextData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextData.Merge(dst, src)
}
func (m *TextData) XXX_Size() int {
	return m.Size()
}
func (m *TextData) XXX_DiscardUnknown() {
	xxx_messageInfo_TextData.DiscardUnknown(m)
}

var xxx_messageInfo_TextData proto.InternalMessageInfo

func (m *TextData) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type SessionData struct {
	SequenceId       uint32   `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	Data             []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	AckStartSeq      []uint32 `protobuf:"varint,3,rep,packed,name=ack_start_seq,json=ackStartSeq" json:"ack_start_seq,omitempty"`
	AckSeqCount      []uint32 `protobuf:"varint,4,rep,packed,name=ack_seq_count,json=ackSeqCount" json:"ack_seq_count,omitempty"`
	IdentifierPrefix []string `protobuf:"bytes,5,rep,name=identifier_prefix,json=identifierPrefix" json:"identifier_prefix,omitempty"`
	WindowSize       uint32   `protobuf:"varint,7,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	Mtu              uint32   `protobuf:"varint,8,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Close            bool     `protobuf:"varint,9,opt,name=close,proto3" json:"close,omitempty"`
}

func (m *SessionData) Reset()      { *m = SessionData{} }
func (*SessionData) ProtoMessage() {}
func (*SessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_payloads_eda209b91fbaf3f5, []int{3}
}
func (m *SessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionData.Merge(dst, src)
}
func (m *SessionData) XXX_Size() int {
	return m.Size()
}
func (m *SessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionData.DiscardUnknown(m)
}

var xxx_messageInfo_SessionData proto.InternalMessageInfo

func (m *SessionData) GetSequenceId() uint32 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *SessionData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SessionData) GetAckStartSeq() []uint32 {
	if m != nil {
		return m.AckStartSeq
	}
	return nil
}

func (m *SessionData) GetAckSeqCount() []uint32 {
	if m != nil {
		return m.AckSeqCount
	}
	return nil
}

func (m *SessionData) GetIdentifierPrefix() []string {
	if m != nil {
		return m.IdentifierPrefix
	}
	return nil
}

func (m *SessionData) GetWindowSize() uint32 {
	if m != nil {
		return m.WindowSize
	}
	return 0
}

func (m *SessionData) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *SessionData) GetClose() bool {
	if m != nil {
		return m.Close
	}
	return false
}

func init() {
	proto.RegisterType((*Message)(nil), "payloads.Message")
	proto.RegisterType((*Payload)(nil), "payloads.Payload")
	proto.RegisterType((*TextData)(nil), "payloads.TextData")
	proto.RegisterType((*SessionData)(nil), "payloads.SessionData")
	proto.RegisterEnum("payloads.PayloadType", PayloadType_name, PayloadType_value)
}
func (x PayloadType) String() string {
	s, ok := PayloadType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if this.Encrypted != that1.Encrypted {
		return false
	}
	if !bytes.Equal(this.Nonce, that1.Nonce) {
		return false
	}
	if !bytes.Equal(this.EncryptedKey, that1.EncryptedKey) {
		return false
	}
	return true
}
func (this *Payload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Payload)
	if !ok {
		that2, ok := that.(Payload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Pid, that1.Pid) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.ReplyToPid, that1.ReplyToPid) {
		return false
	}
	if this.NoAck != that1.NoAck {
		return false
	}
	if this.IsSession != that1.IsSession {
		return false
	}
	return true
}
func (this *TextData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextData)
	if !ok {
		that2, ok := that.(TextData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *SessionData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionData)
	if !ok {
		that2, ok := that.(SessionData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SequenceId != that1.SequenceId {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.AckStartSeq) != len(that1.AckStartSeq) {
		return false
	}
	for i := range this.AckStartSeq {
		if this.AckStartSeq[i] != that1.AckStartSeq[i] {
			return false
		}
	}
	if len(this.AckSeqCount) != len(that1.AckSeqCount) {
		return false
	}
	for i := range this.AckSeqCount {
		if this.AckSeqCount[i] != that1.AckSeqCount[i] {
			return false
		}
	}
	if len(this.IdentifierPrefix) != len(that1.IdentifierPrefix) {
		return false
	}
	for i := range this.IdentifierPrefix {
		if this.IdentifierPrefix[i] != that1.IdentifierPrefix[i] {
			return false
		}
	}
	if this.WindowSize != that1.WindowSize {
		return false
	}
	if this.Mtu != that1.Mtu {
		return false
	}
	if this.Close != that1.Close {
		return false
	}
	return true
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&payloads.Message{")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "Encrypted: "+fmt.Sprintf("%#v", this.Encrypted)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "EncryptedKey: "+fmt.Sprintf("%#v", this.EncryptedKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Payload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&payloads.Payload{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "ReplyToPid: "+fmt.Sprintf("%#v", this.ReplyToPid)+",\n")
	s = append(s, "NoAck: "+fmt.Sprintf("%#v", this.NoAck)+",\n")
	s = append(s, "IsSession: "+fmt.Sprintf("%#v", this.IsSession)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&payloads.TextData{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&payloads.SessionData{")
	s = append(s, "SequenceId: "+fmt.Sprintf("%#v", this.SequenceId)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "AckStartSeq: "+fmt.Sprintf("%#v", this.AckStartSeq)+",\n")
	s = append(s, "AckSeqCount: "+fmt.Sprintf("%#v", this.AckSeqCount)+",\n")
	s = append(s, "IdentifierPrefix: "+fmt.Sprintf("%#v", this.IdentifierPrefix)+",\n")
	s = append(s, "WindowSize: "+fmt.Sprintf("%#v", this.WindowSize)+",\n")
	s = append(s, "Mtu: "+fmt.Sprintf("%#v", this.Mtu)+",\n")
	s = append(s, "Close: "+fmt.Sprintf("%#v", this.Close)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPayloads(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Encrypted {
		dAtA[i] = 0x10
		i++
		if m.Encrypted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.EncryptedKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(len(m.EncryptedKey)))
		i += copy(dAtA[i:], m.EncryptedKey)
	}
	return i, nil
}

func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(m.Type))
	}
	if len(m.Pid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(len(m.Pid)))
		i += copy(dAtA[i:], m.Pid)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.ReplyToPid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(len(m.ReplyToPid)))
		i += copy(dAtA[i:], m.ReplyToPid)
	}
	if m.NoAck {
		dAtA[i] = 0x28
		i++
		if m.NoAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsSession {
		dAtA[i] = 0x30
		i++
		if m.IsSession {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TextData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *SessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SequenceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(m.SequenceId))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.AckStartSeq) > 0 {
		dAtA2 := make([]byte, len(m.AckStartSeq)*10)
		var j1 int
		for _, num := range m.AckStartSeq {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.AckSeqCount) > 0 {
		dAtA4 := make([]byte, len(m.AckSeqCount)*10)
		var j3 int
		for _, num := range m.AckSeqCount {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.IdentifierPrefix) > 0 {
		for _, s := range m.IdentifierPrefix {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.WindowSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(m.WindowSize))
	}
	if m.Mtu != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPayloads(dAtA, i, uint64(m.Mtu))
	}
	if m.Close {
		dAtA[i] = 0x48
		i++
		if m.Close {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintPayloads(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMessage(r randyPayloads, easy bool) *Message {
	this := &Message{}
	v1 := r.Intn(100)
	this.Payload = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	this.Encrypted = bool(bool(r.Intn(2) == 0))
	v2 := r.Intn(100)
	this.Nonce = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Nonce[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.EncryptedKey = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.EncryptedKey[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPayload(r randyPayloads, easy bool) *Payload {
	this := &Payload{}
	this.Type = PayloadType([]int32{0, 1, 2}[r.Intn(3)])
	v4 := r.Intn(100)
	this.Pid = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Pid[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(100)
	this.Data = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.ReplyToPid = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.ReplyToPid[i] = byte(r.Intn(256))
	}
	this.NoAck = bool(bool(r.Intn(2) == 0))
	this.IsSession = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTextData(r randyPayloads, easy bool) *TextData {
	this := &TextData{}
	this.Text = string(randStringPayloads(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSessionData(r randyPayloads, easy bool) *SessionData {
	this := &SessionData{}
	this.SequenceId = uint32(r.Uint32())
	v7 := r.Intn(100)
	this.Data = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	v8 := r.Intn(10)
	this.AckStartSeq = make([]uint32, v8)
	for i := 0; i < v8; i++ {
		this.AckStartSeq[i] = uint32(r.Uint32())
	}
	v9 := r.Intn(10)
	this.AckSeqCount = make([]uint32, v9)
	for i := 0; i < v9; i++ {
		this.AckSeqCount[i] = uint32(r.Uint32())
	}
	v10 := r.Intn(10)
	this.IdentifierPrefix = make([]string, v10)
	for i := 0; i < v10; i++ {
		this.IdentifierPrefix[i] = string(randStringPayloads(r))
	}
	this.WindowSize = uint32(r.Uint32())
	this.Mtu = uint32(r.Uint32())
	this.Close = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPayloads interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePayloads(r randyPayloads) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPayloads(r randyPayloads) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RunePayloads(r)
	}
	return string(tmps)
}
func randUnrecognizedPayloads(r randyPayloads, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPayloads(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPayloads(dAtA []byte, r randyPayloads, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePayloads(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulatePayloads(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulatePayloads(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePayloads(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePayloads(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePayloads(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePayloads(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPayloads(uint64(l))
	}
	if m.Encrypted {
		n += 2
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovPayloads(uint64(l))
	}
	l = len(m.EncryptedKey)
	if l > 0 {
		n += 1 + l + sovPayloads(uint64(l))
	}
	return n
}

func (m *Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPayloads(uint64(m.Type))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovPayloads(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPayloads(uint64(l))
	}
	l = len(m.ReplyToPid)
	if l > 0 {
		n += 1 + l + sovPayloads(uint64(l))
	}
	if m.NoAck {
		n += 2
	}
	if m.IsSession {
		n += 2
	}
	return n
}

func (m *TextData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovPayloads(uint64(l))
	}
	return n
}

func (m *SessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceId != 0 {
		n += 1 + sovPayloads(uint64(m.SequenceId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPayloads(uint64(l))
	}
	if len(m.AckStartSeq) > 0 {
		l = 0
		for _, e := range m.AckStartSeq {
			l += sovPayloads(uint64(e))
		}
		n += 1 + sovPayloads(uint64(l)) + l
	}
	if len(m.AckSeqCount) > 0 {
		l = 0
		for _, e := range m.AckSeqCount {
			l += sovPayloads(uint64(e))
		}
		n += 1 + sovPayloads(uint64(l)) + l
	}
	if len(m.IdentifierPrefix) > 0 {
		for _, s := range m.IdentifierPrefix {
			l = len(s)
			n += 1 + l + sovPayloads(uint64(l))
		}
	}
	if m.WindowSize != 0 {
		n += 1 + sovPayloads(uint64(m.WindowSize))
	}
	if m.Mtu != 0 {
		n += 1 + sovPayloads(uint64(m.Mtu))
	}
	if m.Close {
		n += 2
	}
	return n
}

func sovPayloads(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPayloads(x uint64) (n int) {
	return sovPayloads(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Encrypted:` + fmt.Sprintf("%v", this.Encrypted) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`EncryptedKey:` + fmt.Sprintf("%v", this.EncryptedKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Payload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Payload{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`ReplyToPid:` + fmt.Sprintf("%v", this.ReplyToPid) + `,`,
		`NoAck:` + fmt.Sprintf("%v", this.NoAck) + `,`,
		`IsSession:` + fmt.Sprintf("%v", this.IsSession) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextData{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionData{`,
		`SequenceId:` + fmt.Sprintf("%v", this.SequenceId) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`AckStartSeq:` + fmt.Sprintf("%v", this.AckStartSeq) + `,`,
		`AckSeqCount:` + fmt.Sprintf("%v", this.AckSeqCount) + `,`,
		`IdentifierPrefix:` + fmt.Sprintf("%v", this.IdentifierPrefix) + `,`,
		`WindowSize:` + fmt.Sprintf("%v", this.WindowSize) + `,`,
		`Mtu:` + fmt.Sprintf("%v", this.Mtu) + `,`,
		`Close:` + fmt.Sprintf("%v", this.Close) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPayloads(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayloads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypted = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedKey = append(m.EncryptedKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedKey == nil {
				m.EncryptedKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayloads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayloads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayloads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PayloadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = append(m.Pid[:0], dAtA[iNdEx:postIndex]...)
			if m.Pid == nil {
				m.Pid = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToPid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyToPid = append(m.ReplyToPid[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyToPid == nil {
				m.ReplyToPid = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoAck = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSession", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSession = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPayloads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayloads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayloads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayloads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayloads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayloads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPayloads
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AckStartSeq = append(m.AckStartSeq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPayloads
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPayloads
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPayloads
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AckStartSeq = append(m.AckStartSeq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AckStartSeq", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPayloads
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AckSeqCount = append(m.AckSeqCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPayloads
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPayloads
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPayloads
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AckSeqCount = append(m.AckSeqCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSeqCount", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayloads
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentifierPrefix = append(m.IdentifierPrefix, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowSize", wireType)
			}
			m.WindowSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Close = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPayloads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayloads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayloads(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayloads
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayloads
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPayloads
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPayloads
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPayloads(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPayloads = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayloads   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("payloads/payloads.proto", fileDescriptor_payloads_eda209b91fbaf3f5) }

var fileDescriptor_payloads_eda209b91fbaf3f5 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x52, 0x3d, 0x6f, 0xd3, 0x50,
	0x14, 0xf5, 0x8b, 0x9d, 0xaf, 0x9b, 0x04, 0x85, 0x27, 0x2a, 0x9e, 0x10, 0x3c, 0xa2, 0xb0, 0x84,
	0xaf, 0x56, 0x82, 0x95, 0xa5, 0x2d, 0x0c, 0x55, 0x05, 0xaa, 0x9c, 0x0c, 0x30, 0x59, 0xae, 0x7d,
	0x13, 0x9e, 0x92, 0xfa, 0x39, 0x7e, 0x2f, 0x6a, 0x5c, 0x31, 0xf4, 0x27, 0xf0, 0x33, 0x98, 0x99,
	0xf8, 0x09, 0x8c, 0x19, 0x3b, 0x12, 0x67, 0x61, 0xec, 0xc8, 0x88, 0xfc, 0x9c, 0x8f, 0x6e, 0xe7,
	0x9c, 0x7b, 0x9e, 0xef, 0xb9, 0xf7, 0x1a, 0x1e, 0xc6, 0x7e, 0x3a, 0x91, 0x7e, 0xa8, 0x0e, 0x36,
	0x60, 0x3f, 0x4e, 0xa4, 0x96, 0xb4, 0xb6, 0xe1, 0x8f, 0x5e, 0x8f, 0x84, 0xfe, 0x3a, 0x3b, 0xdf,
	0x0f, 0xe4, 0xc5, 0xc1, 0x48, 0x8e, 0xe4, 0x81, 0x31, 0x9c, 0xcf, 0x86, 0x86, 0x19, 0x62, 0x50,
	0xf1, 0xb0, 0xfb, 0x0d, 0xaa, 0x1f, 0x51, 0x29, 0x7f, 0x84, 0x94, 0x41, 0x75, 0xfd, 0x15, 0x46,
	0x3a, 0xa4, 0xd7, 0x74, 0x37, 0x94, 0x3e, 0x86, 0x3a, 0x46, 0x41, 0x92, 0xc6, 0x1a, 0x43, 0x56,
	0xea, 0x90, 0x5e, 0xcd, 0xdd, 0x09, 0xf4, 0x01, 0x94, 0x23, 0x19, 0x05, 0xc8, 0x6c, 0xf3, 0xaa,
	0x20, 0xf4, 0x19, 0xb4, 0xb6, 0x16, 0x6f, 0x8c, 0x29, 0x73, 0x4c, 0xb5, 0xb9, 0x15, 0x4f, 0x31,
	0xed, 0xfe, 0x24, 0x50, 0x3d, 0x5b, 0x37, 0x79, 0x0e, 0x8e, 0x4e, 0x63, 0x34, 0xbd, 0xef, 0xbd,
	0xd9, 0xdb, 0xdf, 0x4e, 0xb8, 0x36, 0x0c, 0xd2, 0x18, 0x5d, 0x63, 0xa1, 0x6d, 0xb0, 0x63, 0x51,
	0x24, 0x69, 0xba, 0x39, 0xa4, 0x14, 0x9c, 0xd0, 0xd7, 0xfe, 0x3a, 0x82, 0xc1, 0xb4, 0x03, 0xcd,
	0x04, 0xe3, 0x49, 0xea, 0x69, 0xe9, 0xe5, 0xf6, 0x22, 0x00, 0x18, 0x6d, 0x20, 0xcf, 0x44, 0x48,
	0xf7, 0xa0, 0x12, 0x49, 0xcf, 0x0f, 0xc6, 0xac, 0x6c, 0x86, 0x2a, 0x47, 0xf2, 0x30, 0x18, 0xd3,
	0x27, 0x00, 0x42, 0x79, 0x0a, 0x95, 0x12, 0x32, 0x62, 0x95, 0x62, 0x5e, 0xa1, 0xfa, 0x85, 0xd0,
	0xe5, 0x50, 0x1b, 0xe0, 0x5c, 0xbf, 0xcf, 0x7b, 0x50, 0x70, 0x34, 0xce, 0xb5, 0x09, 0x5d, 0x77,
	0x0d, 0xee, 0x5e, 0x97, 0xa0, 0xb1, 0xf6, 0x1a, 0xcf, 0x53, 0x68, 0x28, 0x9c, 0xce, 0x30, 0x0a,
	0xd0, 0x13, 0xc5, 0x6e, 0x5b, 0x2e, 0x6c, 0xa4, 0x93, 0x5d, 0xf8, 0xd2, 0x9d, 0xf0, 0x5d, 0x68,
	0xf9, 0xc1, 0xd8, 0x53, 0xda, 0x4f, 0xb4, 0xa7, 0x70, 0xca, 0xec, 0x8e, 0xdd, 0x6b, 0xb9, 0x0d,
	0x3f, 0x18, 0xf7, 0x73, 0xad, 0x8f, 0xd3, 0xad, 0x07, 0xa7, 0x5e, 0x20, 0x67, 0x91, 0x66, 0xce,
	0xce, 0x83, 0xd3, 0xe3, 0x5c, 0xa2, 0x2f, 0xe1, 0xbe, 0x08, 0x31, 0xd2, 0x62, 0x28, 0x30, 0xf1,
	0xe2, 0x04, 0x87, 0x62, 0xce, 0xca, 0x1d, 0xbb, 0x57, 0x77, 0xdb, 0xbb, 0xc2, 0x99, 0xd1, 0xf3,
	0xa4, 0x97, 0x22, 0x0a, 0xe5, 0xa5, 0xa7, 0xc4, 0x15, 0xb2, 0x6a, 0x91, 0xb4, 0x90, 0xfa, 0xe2,
	0xca, 0x2c, 0xfe, 0x42, 0xcf, 0x58, 0xcd, 0x14, 0x72, 0x98, 0x1f, 0x3f, 0x98, 0x48, 0x85, 0xac,
	0x5e, 0x6c, 0xd0, 0x90, 0x17, 0xaf, 0xa0, 0x71, 0xe7, 0x6a, 0x14, 0xa0, 0x72, 0x74, 0xf2, 0xe9,
	0xd0, 0xfd, 0xd2, 0xb6, 0x68, 0x0d, 0x9c, 0xc1, 0x87, 0xcf, 0x83, 0x36, 0xa1, 0x55, 0xb0, 0x0f,
	0x8f, 0x4f, 0xdb, 0xa5, 0xa3, 0x77, 0x8b, 0x25, 0xb7, 0x6e, 0x96, 0xdc, 0xba, 0x5d, 0x72, 0xf2,
	0x6f, 0xc9, 0xc9, 0x75, 0xc6, 0xc9, 0x8f, 0x8c, 0x93, 0x5f, 0x19, 0x27, 0xbf, 0x33, 0x4e, 0x16,
	0x19, 0x27, 0x7f, 0x32, 0x4e, 0xfe, 0x66, 0xdc, 0xba, 0xcd, 0x38, 0xf9, 0xbe, 0xe2, 0xd6, 0x62,
	0xc5, 0xad, 0x9b, 0x15, 0xb7, 0xce, 0x2b, 0xe6, 0x47, 0x7e, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0xcf, 0x7e, 0x34, 0x73, 0x1c, 0x03, 0x00, 0x00,
}
